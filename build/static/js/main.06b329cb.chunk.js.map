{"version":3,"sources":["services/api.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getCovidDatas","oneCity","date","a","fetch","res","result","json","console","log","App","props","state","city","search","bind","handleChange","this","chrome","tabs","query","currentWindow","active","tab","sendMessage","id","from","subject","response","e","setState","target","value","undefined","allFranceDataByDate","find","item","nom","className","type","onChange","onClick","deces","gueris","hospitalises","reanimation","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8QAAaA,EAAgB,CAC3BC,QAAQ,WAAD,4BAAE,WAAOC,GAAP,iBAAAC,EAAA,+EAEaC,MAAM,2DAAD,OAA4DF,IAF9E,cAECG,EAFD,OAGCC,EAASD,EAAIE,OAHd,kBAKED,GALF,gCAOLE,QAAQC,IAAR,MAPK,yDAAF,mDAAC,ICkGKC,G,wDAvFb,WAAYC,GAAgB,IAAD,8BACzB,cAAMA,IAEDC,MAAQ,CACXC,KAAM,KACNX,KAAM,cAGR,EAAKY,OAAS,EAAKA,OAAOC,KAAZ,gBACd,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATK,E,gEAazBE,KAAKH,SAEDI,QAAUA,OAAOC,MACnBD,OAAOC,KAAKC,MAAM,CAACC,eAAe,EAAMC,QAAQ,IAAO,SAAAH,GACrD,IAAMI,EAAMJ,EAAK,GACjBD,OAAOC,KAAKK,YAAYD,EAAIE,IAAM,EAAG,CAACC,KAAM,QAASC,QAAS,gBAAgB,SAAAC,GAC5EpB,QAAQC,IAAImB,W,mCAMPC,GACXZ,KAAKa,SAAS,CACZ5B,KAAM2B,EAAEE,OAAOC,U,iKAKMhC,EAAcC,QAAQgB,KAAKL,MAAMV,M,YAGpD+B,IAHE5B,E,QAGe6B,sBACnB5B,EAASD,EAAI6B,oBAAoBC,MAAK,SAACC,GACrC,MAAoB,UAAbA,EAAKC,OAGdpB,KAAKa,SAAS,CACZjB,KAAMP,K,qIAMV,OACE,qBAAKgC,UAAU,MAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,aAAf,UACE,uBAAOA,UAAU,kBAAkBC,KAAK,OAAOC,SAAUvB,KAAKD,eAC9D,wBAAQsB,UAAU,cAAcG,QAASxB,KAAKH,OAA9C,oBACEG,KAAKL,MAAMC,MAAQ,MAAQI,KAAKL,MAAMC,KACtC,sBAAKyB,UAAU,iBAAf,UACI,oBAAIA,UAAU,YAAd,SACGrB,KAAKL,MAAMC,KAAKwB,MAEnB,kCACE,gCACE,+BACE,uCACA,wCACA,8CACA,6CACA,2CAGJ,gCACE,+BACE,6BAAKpB,KAAKL,MAAMC,KAAK6B,QACrB,6BAAKzB,KAAKL,MAAMC,KAAK8B,SACrB,6BAAK1B,KAAKL,MAAMC,KAAK+B,eACrB,6BAAK3B,KAAKL,MAAMC,KAAKgC,cACrB,6BAAK5B,KAAKL,MAAMC,KAAKX,kBAK/B,qBAAKoC,UAAU,QAAf,4D,GAhFIQ,IAAMC,YCGTC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.06b329cb.chunk.js","sourcesContent":["export const getCovidDatas = {\n  oneCity: async (date: String) => {\n    try {\n      const res = await fetch(`https://coronavirusapi-france.now.sh/AllDataByDate?date=${date}`);\n      const result = res.json();\n\n      return result;\n    } catch (e) {\n      console.log(e)\n    }\n\t}\n}","import React from 'react';\nimport { getCovidDatas } from './services/api';\nimport './App.css';\n\ninterface IState {\n  city: any;\n  date: String;\n};\n\ninterface IProps {}\n\nclass App extends React.Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = {\n      city: null,\n      date: \"2020-04-19\"\n    }\n\n    this.search = this.search.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  public componentDidMount() {\n    this.search();\n\n    if (chrome && chrome.tabs) {\n      chrome.tabs.query({currentWindow: true, active: true}, tabs => {\n        const tab = tabs[0];\n        chrome.tabs.sendMessage(tab.id || 0, {from: \"popup\", subject: \"getFullName\"}, response => {\n          console.log(response)\n        });\n      });\n    }\n  }\n\n  handleChange(e: any) {\n    this.setState({\n      date: e.target.value\n    });\n  }\n\n  async search() {\n    const res: any = await getCovidDatas.oneCity(this.state.date);\n    let result: any;\n\n    if (undefined != res.allFranceDataByDate) {\n      result = res.allFranceDataByDate.find((item: any) => {\n        return item.nom === \"Paris\";\n      });\n\n      this.setState({\n        city: result\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"container\">\n          <div className=\"city-infos\">\n            <input className=\"city-search-bar\" type=\"date\" onChange={this.handleChange} />\n            <button className=\"city-search\" onClick={this.search}>Search</button>\n            {(this.state.city && null != this.state.city) ?\n              <div className=\"city-container\">\n                  <h1 className=\"city-name\">\n                    {this.state.city.nom}\n                  </h1>\n                  <table>\n                    <thead>\n                      <tr>\n                        <th>deces</th>\n                        <th>gueris</th>\n                        <th>hospitalises</th>\n                        <th>reanimation</th>\n                        <th>date</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr>\n                        <td>{this.state.city.deces}</td>\n                        <td>{this.state.city.gueris}</td>\n                        <td>{this.state.city.hospitalises}</td>\n                        <td>{this.state.city.reanimation}</td>\n                        <td>{this.state.city.date}</td>\n                      </tr>\n                    </tbody>\n                  </table>\n              </div>\n            : <div className=\"error\">Pas de donn√©es pour cette date..</div>}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}